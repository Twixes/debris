#!/usr/bin/env node

require('dotenv').config()
if (process.env.DEBRIS_SENTRY_BACKEND_DSN) require('@sentry/node').init({ dsn: process.env.DEBRIS_SENTRY_BACKEND_DSN })

const app = require('../app')
const debug = require('debug')('debris:server')
const http = require('http')

const port = normalizePort(process.env.DEBRIS_PORT || 3000)
app.set('port', port)
app.enable('trust proxy')

const server = http.createServer(app)

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

function normalizePort (val) {
  const port = parseInt(val, 10)
  if (isNaN(port)) return val
  else if (port >= 0) return port
  else return false
}

function onError (error) {
  if (error.syscall !== 'listen') throw error
  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port
  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
    default:
      throw error
  }
}

function onListening () {
  const addr = server.address()
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
  debug('Listening on ' + bind)
}
